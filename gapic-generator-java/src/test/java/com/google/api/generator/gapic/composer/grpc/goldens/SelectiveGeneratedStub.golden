package com.google.selective.generate.v1beta1.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.core.BackgroundResourceAggregation;
import com.google.api.gax.grpc.GrpcCallSettings;
import com.google.api.gax.grpc.GrpcStubCallableFactory;
import com.google.api.gax.rpc.BidiStreamingCallable;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.longrunning.stub.GrpcOperationsStub;
import com.google.selective.generate.v1beta1.EchoRequest;
import com.google.selective.generate.v1beta1.EchoResponse;
import io.grpc.MethodDescriptor;
import io.grpc.protobuf.ProtoUtils;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS.
/**
 * gRPC stub implementation for the EchoServiceShouldGeneratePartial service API.
 *
 * <p>This class is for advanced usage and reflects the underlying API directly.
 */
@BetaApi
@Generated("by gapic-generator-java")
public class GrpcEchoServiceShouldGeneratePartialStub extends EchoServiceShouldGeneratePartialStub {
  private static final MethodDescriptor<EchoRequest, EchoResponse>
      echoShouldIncludeMethodDescriptor =
          MethodDescriptor.<EchoRequest, EchoResponse>newBuilder()
              .setType(MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(
                  "google.selective.generate.v1beta1.EchoServiceShouldGeneratePartial/EchoShouldInclude")
              .setRequestMarshaller(ProtoUtils.marshaller(EchoRequest.getDefaultInstance()))
              .setResponseMarshaller(ProtoUtils.marshaller(EchoResponse.getDefaultInstance()))
              .build();

  private static final MethodDescriptor<EchoRequest, EchoResponse>
      chatShouldIncludeMethodDescriptor =
          MethodDescriptor.<EchoRequest, EchoResponse>newBuilder()
              .setType(MethodDescriptor.MethodType.BIDI_STREAMING)
              .setFullMethodName(
                  "google.selective.generate.v1beta1.EchoServiceShouldGeneratePartial/ChatShouldInclude")
              .setRequestMarshaller(ProtoUtils.marshaller(EchoRequest.getDefaultInstance()))
              .setResponseMarshaller(ProtoUtils.marshaller(EchoResponse.getDefaultInstance()))
              .build();

  private static final MethodDescriptor<EchoRequest, EchoResponse>
      chatAgainShouldIncludeMethodDescriptor =
          MethodDescriptor.<EchoRequest, EchoResponse>newBuilder()
              .setType(MethodDescriptor.MethodType.BIDI_STREAMING)
              .setFullMethodName(
                  "google.selective.generate.v1beta1.EchoServiceShouldGeneratePartial/ChatAgainShouldInclude")
              .setRequestMarshaller(ProtoUtils.marshaller(EchoRequest.getDefaultInstance()))
              .setResponseMarshaller(ProtoUtils.marshaller(EchoResponse.getDefaultInstance()))
              .build();

  private final UnaryCallable<EchoRequest, EchoResponse> echoShouldIncludeCallable;
  private final BidiStreamingCallable<EchoRequest, EchoResponse> chatShouldIncludeCallable;
  private final BidiStreamingCallable<EchoRequest, EchoResponse> chatAgainShouldIncludeCallable;

  private final BackgroundResource backgroundResources;
  private final GrpcOperationsStub operationsStub;
  private final GrpcStubCallableFactory callableFactory;

  public static final GrpcEchoServiceShouldGeneratePartialStub create(
      EchoServiceShouldGeneratePartialStubSettings settings) throws IOException {
    return new GrpcEchoServiceShouldGeneratePartialStub(settings, ClientContext.create(settings));
  }

  public static final GrpcEchoServiceShouldGeneratePartialStub create(ClientContext clientContext)
      throws IOException {
    return new GrpcEchoServiceShouldGeneratePartialStub(
        EchoServiceShouldGeneratePartialStubSettings.newBuilder().build(), clientContext);
  }

  public static final GrpcEchoServiceShouldGeneratePartialStub create(
      ClientContext clientContext, GrpcStubCallableFactory callableFactory) throws IOException {
    return new GrpcEchoServiceShouldGeneratePartialStub(
        EchoServiceShouldGeneratePartialStubSettings.newBuilder().build(),
        clientContext,
        callableFactory);
  }

  /**
   * Constructs an instance of GrpcEchoServiceShouldGeneratePartialStub, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static factory
   * methods should be preferred.
   */
  protected GrpcEchoServiceShouldGeneratePartialStub(
      EchoServiceShouldGeneratePartialStubSettings settings, ClientContext clientContext)
      throws IOException {
    this(settings, clientContext, new GrpcEchoServiceShouldGeneratePartialCallableFactory());
  }

  /**
   * Constructs an instance of GrpcEchoServiceShouldGeneratePartialStub, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static factory
   * methods should be preferred.
   */
  protected GrpcEchoServiceShouldGeneratePartialStub(
      EchoServiceShouldGeneratePartialStubSettings settings,
      ClientContext clientContext,
      GrpcStubCallableFactory callableFactory)
      throws IOException {
    this.callableFactory = callableFactory;
    this.operationsStub = GrpcOperationsStub.create(clientContext, callableFactory);

    GrpcCallSettings<EchoRequest, EchoResponse> echoShouldIncludeTransportSettings =
        GrpcCallSettings.<EchoRequest, EchoResponse>newBuilder()
            .setMethodDescriptor(echoShouldIncludeMethodDescriptor)
            .build();
    GrpcCallSettings<EchoRequest, EchoResponse> chatShouldIncludeTransportSettings =
        GrpcCallSettings.<EchoRequest, EchoResponse>newBuilder()
            .setMethodDescriptor(chatShouldIncludeMethodDescriptor)
            .build();
    GrpcCallSettings<EchoRequest, EchoResponse> chatAgainShouldIncludeTransportSettings =
        GrpcCallSettings.<EchoRequest, EchoResponse>newBuilder()
            .setMethodDescriptor(chatAgainShouldIncludeMethodDescriptor)
            .build();

    this.echoShouldIncludeCallable =
        callableFactory.createUnaryCallable(
            echoShouldIncludeTransportSettings,
            settings.echoShouldIncludeSettings(),
            clientContext);
    this.chatShouldIncludeCallable =
        callableFactory.createBidiStreamingCallable(
            chatShouldIncludeTransportSettings,
            settings.chatShouldIncludeSettings(),
            clientContext);
    this.chatAgainShouldIncludeCallable =
        callableFactory.createBidiStreamingCallable(
            chatAgainShouldIncludeTransportSettings,
            settings.chatAgainShouldIncludeSettings(),
            clientContext);

    this.backgroundResources =
        new BackgroundResourceAggregation(clientContext.getBackgroundResources());
  }

  public GrpcOperationsStub getOperationsStub() {
    return operationsStub;
  }

  @Override
  public UnaryCallable<EchoRequest, EchoResponse> echoShouldIncludeCallable() {
    return echoShouldIncludeCallable;
  }

  @Override
  public BidiStreamingCallable<EchoRequest, EchoResponse> chatShouldIncludeCallable() {
    return chatShouldIncludeCallable;
  }

  @Override
  public BidiStreamingCallable<EchoRequest, EchoResponse> chatAgainShouldIncludeCallable() {
    return chatAgainShouldIncludeCallable;
  }

  @Override
  public final void close() {
    try {
      backgroundResources.close();
    } catch (RuntimeException e) {
      throw e;
    } catch (Exception e) {
      throw new IllegalStateException("Failed to close resource", e);
    }
  }

  @Override
  public void shutdown() {
    backgroundResources.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return backgroundResources.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return backgroundResources.isTerminated();
  }

  @Override
  public void shutdownNow() {
    backgroundResources.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return backgroundResources.awaitTermination(duration, unit);
  }
}
